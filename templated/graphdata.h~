#ifndef GRAPHDATA_H
#define GRAPHDATA_H

#include <string>
#include <fstream>
#include <iostream>
#include <cstdlib>

class CompareDist //used in GraphList::Diameter()
{
public:
    bool operator()(std::pair<int,int> n1, std::pair<int,int> n2)
    {

      return n1.second<n2.second;

    }
};

/**
 * \class Graph
 *
 * @brief The Graph class
 */
template <class T>
class GraphData
{
	public:
    /**
     * @brief Graph Default constructor
     */
    GraphData(std::ifstream* file, std::string* output, std::string* firstLine, int nVertices);

    /**
     * @brief BFS Runs a Breadth-first search and saves the result to a text file
     *
     * The text output contains: \n
     * The search tree. \n
     * The root's degree is zero. \n
     * To represent the tree just list for each vertex: \n
     *  it's parent \n
     *  it's degree \n
     *
     * @param inicial Vertex from wich the search starts
     * @param path Where to save the results
     * @return 1
     */
    virtual int BFS(int inicial, std::string path);// = "./graphBFS.txt");

    /**
     * @brief DFS Runs a Depth-first search and saves the result to a text file
     *
     * The text output contains:\n
     * The search tree.\n
     * The root's degree is zero.\n
     * To represent the tree just list for each vertex:\n
     *  it's parent\n
     *  it's degree\n
     *
     * @param inicial Vertex from wich the search starts
     * @param path Where to save the results
     * @return 1
     */
    virtual int DFS(int inicial, std::string path);

    /**
     * @brief connectedComponents Computes the graph's Connected Components on a text file.
     *
     * Text output format:\n
     * The number of connected components\n
     * Size of each component\n
     * Lists of vertices belonging to each component (in decrescent order of component size)\n
     *
     * @return 1
     */
    virtual int connectedComponents(std::string path);
    
    virtual int getNumberOfVertices();
    
    virtual int Diameter(int b, int e);

    ~Graph(){}

protected:

private:

	T* data;

};

#endif // GRAPH_H
